#!/usr/bin/env dart

/// EXECUTE REAL TRANSACTION USING YOUR WORKING SERVICE
/// This uses your existing StarknetService which handles versions correctly

import 'lib/services/starknet_service.dart';

void main() async {
  print('üöÄ === EXECUTING REAL TRANSACTION WITH STARKNET SERVICE ===');
  print('‚ö†Ô∏è  WARNING: This will spend real ETH on Sepolia testnet');
  
  // Your wallet details
  final privateKeyHex = '0x06f2d72ab60a23f96e6a1ed1c1d368f706ab699e3ead50b7ae51b1ad766f308e';
  final walletAddress = '0x05715B600c38f3BFA539281865Cf8d7B9fE998D79a2CF181c70eFFCb182752F7';
  final ethContract = '0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7';
  
  try {
    // 1. Initialize StarknetService (your working implementation)
    final starknetService = StarknetService(useMainnet: false);
    await starknetService.initialize();
    
    print('‚úÖ StarknetService initialized');
    
    // 2. Check current balance
    final balance = await starknetService.getEthBalance(walletAddress);
    print('üí∞ Current ETH balance: $balance ETH');
    
    // 3. Build transaction using your working method
    final transactionCall = starknetService.buildTradingTransaction(
      tokenAddress: ethContract,
      amount: '0x1', // 1 wei
      exchangeAddress: walletAddress, // approve to yourself (safe)
      operation: 'approve',
    );
    
    print('‚úÖ Transaction built: ${transactionCall.toString()}');
    
    // 4. EXECUTE REAL TRANSACTION using your working service
    print('üöÄ Executing real transaction...');
    
    final txHash = await starknetService.signAndSubmitTransaction(
      privateKey: privateKeyHex,
      calls: [transactionCall],
      options: {'waitForAcceptance': true},
    );
    
    print('‚úÖ TRANSACTION SUCCESSFUL!');
    print('üìù TX Hash: $txHash');
    print('üîó View on Voyager: https://sepolia.voyager.online/tx/$txHash');
    print('üîó View on Starkscan: https://sepolia.starkscan.co/tx/$txHash');
    
    // 5. Check balance after transaction
    await Future.delayed(Duration(seconds: 10));
    final newBalance = await starknetService.getEthBalance(walletAddress);
    print('üí∞ New ETH balance: $newBalance ETH');
    
    final gasUsed = double.parse(balance) - double.parse(newBalance);
    print('‚õΩ Gas used: ${gasUsed.toStringAsFixed(8)} ETH');
    
  } catch (e) {
    print('‚ùå Transaction failed: $e');
    print('Stack trace: ${StackTrace.current}');
  }
  
  print('üèÅ Real transaction test completed');
}