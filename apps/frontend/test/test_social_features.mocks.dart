// Mocks generated by Mockito 5.4.6 from annotations
// in astratrade_app/test/test_social_features.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:astratrade_app/models/simple_gamification.dart' as _i5;
import 'package:astratrade_app/models/simple_trade.dart' as _i7;
import 'package:astratrade_app/services/friend_challenges_service.dart' as _i2;
import 'package:astratrade_app/services/simple_social_service.dart' as _i3;
import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFriendChallenge_0 extends _i1.SmartFake
    implements _i2.FriendChallenge {
  _FakeFriendChallenge_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SimpleSocialService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSimpleSocialService extends _i1.Mock
    implements _i3.SimpleSocialService {
  MockSimpleSocialService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> shareAchievement({
    required _i5.Achievement? achievement,
    required int? currentLevel,
    required int? totalXP,
    _i6.Widget? customWidget,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#shareAchievement, [], {
              #achievement: achievement,
              #currentLevel: currentLevel,
              #totalXP: totalXP,
              #customWidget: customWidget,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> shareLevelUp({
    required int? newLevel,
    required int? totalXP,
    required int? xpToNext,
    _i6.Widget? levelUpWidget,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#shareLevelUp, [], {
              #newLevel: newLevel,
              #totalXP: totalXP,
              #xpToNext: xpToNext,
              #levelUpWidget: levelUpWidget,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> shareStreak({
    required int? streakDays,
    required double? successRate,
    required int? totalTrades,
    _i6.Widget? streakWidget,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#shareStreak, [], {
              #streakDays: streakDays,
              #successRate: successRate,
              #totalTrades: totalTrades,
              #streakWidget: streakWidget,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> shareTradeSuccess({
    required _i7.SimpleTrade? trade,
    required double? profitPercentage,
    required int? currentLevel,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#shareTradeSuccess, [], {
              #trade: trade,
              #profitPercentage: profitPercentage,
              #currentLevel: currentLevel,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> createFriendChallenge({
    required String? challengeType,
    required int? targetValue,
    required Duration? duration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createFriendChallenge, [], {
              #challengeType: challengeType,
              #targetValue: targetValue,
              #duration: duration,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> shareLeaderboardPosition({
    required int? rank,
    required int? totalXP,
    required String? rankTitle,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#shareLeaderboardPosition, [], {
              #rank: rank,
              #totalXP: totalXP,
              #rankTitle: rankTitle,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  Map<String, dynamic> getSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getSettings, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.Future<void> setSettings(Map<String, dynamic>? settings) =>
      (super.noSuchMethod(
            Invocation.method(#setSettings, [settings]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [FriendChallengesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFriendChallengesService extends _i1.Mock
    implements _i2.FriendChallengesService {
  MockFriendChallengesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<List<_i2.FriendChallenge>> get challengesStream =>
      (super.noSuchMethod(
            Invocation.getter(#challengesStream),
            returnValue: _i4.Stream<List<_i2.FriendChallenge>>.empty(),
          )
          as _i4.Stream<List<_i2.FriendChallenge>>);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.FriendChallenge> createChallenge({
    required _i2.ChallengeType? type,
    required String? title,
    required String? description,
    required int? targetValue,
    required Duration? duration,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createChallenge, [], {
              #type: type,
              #title: title,
              #description: description,
              #targetValue: targetValue,
              #duration: duration,
            }),
            returnValue: _i4.Future<_i2.FriendChallenge>.value(
              _FakeFriendChallenge_0(
                this,
                Invocation.method(#createChallenge, [], {
                  #type: type,
                  #title: title,
                  #description: description,
                  #targetValue: targetValue,
                  #duration: duration,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.FriendChallenge>);

  @override
  _i4.Future<void> joinChallenge(String? challengeId) =>
      (super.noSuchMethod(
            Invocation.method(#joinChallenge, [challengeId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateChallengeProgress({
    required _i7.SimpleTrade? trade,
    required int? currentXP,
    required int? currentLevel,
    required int? streakDays,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateChallengeProgress, [], {
              #trade: trade,
              #currentXP: currentXP,
              #currentLevel: currentLevel,
              #streakDays: streakDays,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.FriendChallenge>> getActiveChallenges() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveChallenges, []),
            returnValue: _i4.Future<List<_i2.FriendChallenge>>.value(
              <_i2.FriendChallenge>[],
            ),
          )
          as _i4.Future<List<_i2.FriendChallenge>>);

  @override
  _i4.Future<List<_i2.FriendChallenge>> getCompletedChallenges() =>
      (super.noSuchMethod(
            Invocation.method(#getCompletedChallenges, []),
            returnValue: _i4.Future<List<_i2.FriendChallenge>>.value(
              <_i2.FriendChallenge>[],
            ),
          )
          as _i4.Future<List<_i2.FriendChallenge>>);

  @override
  List<Map<String, dynamic>> getChallengeTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#getChallengeTemplates, []),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
