#!/bin/bash

# Enhanced EAEPT Workflow - Convenient CLI Wrapper
# Combines Express-Ask-Explore-Plan-Code-Test with Claude Context Plugin

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
EAEPT_ENGINE="$SCRIPT_DIR/enhanced-eaept-workflow.py"
CONTEXT_MANAGER="$SCRIPT_DIR/context-manager.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_header() {
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║${NC}  🚀 ${CYAN}Enhanced EAEPT Workflow${NC} - AstraTrade Integration  ${PURPLE}║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[EAEPT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_phase() {
    echo -e "${CYAN}[PHASE]${NC} $1"
}

# Check dependencies
check_dependencies() {
    print_status "Checking dependencies..."
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 is required but not installed"
        exit 1
    fi
    
    # Check EAEPT engine
    if [ ! -f "$EAEPT_ENGINE" ]; then
        print_error "EAEPT engine not found at $EAEPT_ENGINE"
        exit 1
    fi
    
    # Check context manager
    if [ ! -f "$CONTEXT_MANAGER" ]; then
        print_warning "Context manager not found at $CONTEXT_MANAGER"
    fi
    
    print_success "Dependencies checked"
}

# Start new EAEPT workflow
start_workflow() {
    local task="$1"
    if [ -z "$task" ]; then
        print_error "Task description is required"
        echo "Usage: $0 start \"<task description>\""
        exit 1
    fi
    
    print_header
    print_status "Starting Enhanced EAEPT Workflow"
    print_status "Task: $task"
    echo ""
    
    # Initialize context monitoring
    if [ -f "$CONTEXT_MANAGER" ]; then
        print_status "Initializing context monitoring..."
        "$CONTEXT_MANAGER" start
    fi
    
    # Start EAEPT workflow
    print_phase "Launching Express-Ask-Explore-Plan-Code-Test workflow..."
    python3 "$EAEPT_ENGINE" --start "$task" --auto
}

# Continue existing workflow
continue_workflow() {
    print_header
    print_status "Continuing Enhanced EAEPT Workflow"
    echo ""
    
    python3 "$EAEPT_ENGINE" --continue-workflow
}

# Show workflow status
show_status() {
    print_header
    print_status "Enhanced EAEPT Workflow Status"
    echo ""
    
    # Show EAEPT status
    python3 "$EAEPT_ENGINE" --status
    
    echo ""
    print_status "Context Management Status"
    
    # Show context status if available
    if [ -f "$CONTEXT_MANAGER" ]; then
        "$CONTEXT_MANAGER" status
    else
        print_warning "Context manager not available"
    fi
}

# Execute specific phase
execute_phase() {
    local phase="$1"
    if [ -z "$phase" ]; then
        print_error "Phase is required"
        echo "Valid phases: express, ask, explore, plan, code, test"
        exit 1
    fi
    
    print_header
    print_phase "Executing $phase phase"
    echo ""
    
    python3 "$EAEPT_ENGINE" --phase "$phase"
}

# Reset workflow
reset_workflow() {
    print_header
    print_warning "Resetting Enhanced EAEPT Workflow"
    
    read -p "Are you sure you want to reset the workflow state? (y/N): " -n 1 -r
    echo ""
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        python3 "$EAEPT_ENGINE" --reset
        print_success "Workflow state reset"
    else
        print_status "Reset cancelled"
    fi
}

# Interactive mode
interactive_mode() {
    print_header
    print_status "Enhanced EAEPT Interactive Mode"
    echo ""
    
    while true; do
        echo "Choose an option:"
        echo "1) Start new workflow"
        echo "2) Continue current workflow"
        echo "3) Show status"
        echo "4) Execute specific phase"
        echo "5) Reset workflow"
        echo "6) Exit"
        echo ""
        read -p "Enter your choice (1-6): " choice
        
        case $choice in
            1)
                read -p "Enter task description: " task
                start_workflow "$task"
                ;;
            2)
                continue_workflow
                ;;
            3)
                show_status
                ;;
            4)
                echo "Available phases: express, ask, explore, plan, code, test"
                read -p "Enter phase name: " phase
                execute_phase "$phase"
                ;;
            5)
                reset_workflow
                ;;
            6)
                print_success "Goodbye!"
                exit 0
                ;;
            *)
                print_error "Invalid choice. Please enter 1-6."
                ;;
        esac
        
        echo ""
        read -p "Press Enter to continue..."
        echo ""
    done
}

# Quick start with common AstraTrade tasks
quick_start() {
    print_header
    print_status "Enhanced EAEPT Quick Start - AstraTrade Tasks"
    echo ""
    
    echo "Select a common AstraTrade development task:"
    echo "1) Implement new cosmic UI component"
    echo "2) Add new trading feature"
    echo "3) Optimize mobile performance"
    echo "4) Create new smart contract"
    echo "5) Add new API endpoint"
    echo "6) Implement new game mechanic"
    echo "7) Custom task"
    echo ""
    read -p "Enter your choice (1-7): " choice
    
    case $choice in
        1)
            start_workflow "Implement new cosmic UI component with Flutter and cosmic theming"
            ;;
        2)
            start_workflow "Add new trading feature with FastAPI backend and real-time updates"
            ;;
        3)
            start_workflow "Optimize mobile performance to maintain 60fps cosmic casino experience"
            ;;
        4)
            start_workflow "Create new smart contract with Cairo for Starknet integration"
            ;;
        5)
            start_workflow "Add new API endpoint with FastAPI and database integration"
            ;;
        6)
            start_workflow "Implement new cosmic casino game mechanic with Flutter"
            ;;
        7)
            read -p "Enter custom task description: " task
            start_workflow "$task"
            ;;
        *)
            print_error "Invalid choice. Please enter 1-7."
            exit 1
            ;;
    esac
}

# Show help
show_help() {
    echo "Enhanced EAEPT Workflow - AstraTrade Integration"
    echo ""
    echo "A systematic development workflow combining Express-Ask-Explore-Plan-Code-Test"
    echo "methodology with intelligent Claude context management for AstraTrade development."
    echo ""
    echo "Usage: $0 [command] [options]"
    echo ""
    echo "Commands:"
    echo "  start \"<task>\"     Start new EAEPT workflow with task description"
    echo "  continue           Continue existing workflow from current phase"
    echo "  status             Show current workflow and context status"
    echo "  phase <name>       Execute specific phase (express, ask, explore, plan, code, test)"
    echo "  reset              Reset workflow state"
    echo "  interactive        Enter interactive mode"
    echo "  quick              Quick start with common AstraTrade tasks"
    echo "  help               Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 start \"Implement cosmic trading interface\""
    echo "  $0 continue"
    echo "  $0 phase explore"
    echo "  $0 status"
    echo "  $0 quick"
    echo ""
    echo "EAEPT Phases:"
    echo "  express    Deep analysis and task framing"
    echo "  ask        Interactive clarification and validation"
    echo "  explore    RAG-powered research and discovery"
    echo "  plan       Detailed implementation planning"
    echo "  code       Systematic implementation"
    echo "  test       Comprehensive validation and QA"
    echo ""
    echo "Features:"
    echo "  ✅ Full auto-orchestration between phases"
    echo "  ✅ Intelligent context management with Claude plugin"
    echo "  ✅ RAG integration with AstraTrade knowledge base"
    echo "  ✅ Phase-specific optimization strategies"
    echo "  ✅ Real-time monitoring and recommendations"
    echo "  ✅ AstraTrade-specific development patterns"
    echo "  ✅ Cosmic casino theme integration guidance"
    echo "  ✅ Flutter/FastAPI/Cairo workflow optimization"
    echo ""
}

# Main command handler
main() {
    case "$1" in
        "start")
            check_dependencies
            start_workflow "$2"
            ;;
        "continue")
            check_dependencies
            continue_workflow
            ;;
        "status")
            check_dependencies
            show_status
            ;;
        "phase")
            check_dependencies
            execute_phase "$2"
            ;;
        "reset")
            check_dependencies
            reset_workflow
            ;;
        "interactive")
            check_dependencies
            interactive_mode
            ;;
        "quick")
            check_dependencies
            quick_start
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        "")
            print_header
            print_status "No command specified. Use 'help' for usage information."
            echo ""
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

main "$@"